import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { TopicClustering, Topic } from "./analysis/topicClustering";
import { DeepAnalysis } from "./analysis/deepAnalysis";
import { ChartGenerator } from "./visualization/chartGenerator";
import { HistoricalComparison } from "./analysis/historicalComparison";
import { TrendPrediction } from "./analysis/trendPrediction";
import { RelationshipAnalysis } from "./analysis/relationshipAnalysis";

dotenv.config();

interface ReportSettings {
  reportSettings: {
    detailLevel: string;
    enableTopicClustering: boolean;
    enableDeepAnalysis: boolean;
    enableVisualization: boolean;
    enableRecommendations: boolean;
    enableHistoricalComparison: boolean;
    enableTrendPrediction: boolean;
    enableRelationshipAnalysis: boolean;
  };
}

interface GenerateDraftResult {
  draftPost: string;
  topics: Topic[];
  avgQualityScore: number;
}

/**
 * Generate enhanced AI trend report with topic clustering and deep analysis
 */
export async function generateDraft(rawStories: string): Promise<GenerateDraftResult> {
  console.log(`Generating enhanced report with ${rawStories.length} characters of data...`);

  try {
    const stories = JSON.parse(rawStories);

    if (!stories || stories.length === 0) {
      const fallback = generateFallbackReport();
      return { draftPost: fallback, topics: [], avgQualityScore: 0 };
    }

    // Load settings
    const settings = loadReportSettings();

    const currentDate = new Date().toLocaleDateString("zh-CN");

    // Calculate average quality score
    const avgQualityScore =
      stories.length > 0
        ? stories.reduce((sum: number, s: any) => sum + (s.qualityScore?.finalScore || 75), 0) /
          stories.length
        : 75;

    // Step 1: Topic Clustering
    console.log("\nüìë Step 1: Topic Clustering...");
    const topicClustering = new TopicClustering();
    const topics = await topicClustering.clusterStories(stories);

    if (topics.length === 0) {
      const fallback = generateFallbackReport();
      return { draftPost: fallback, topics: [], avgQualityScore };
    }

    // Step 2: Deep Analysis
    let analyses = new Map();
    if (settings.reportSettings.enableDeepAnalysis) {
      console.log("\nüî¨ Step 2: Deep Analysis...");
      const deepAnalysis = new DeepAnalysis();
      analyses = await deepAnalysis.analyzeTopics(topics);
    }

    // Step 3: Generate Visualizations
    let charts = { topicDistribution: "", accountActivity: "", keywordCloud: "" };
    if (settings.reportSettings.enableVisualization) {
      console.log("\nüìä Step 3: Generating Visualizations...");
      const chartGenerator = new ChartGenerator();
      charts = chartGenerator.generateCharts(topics, stories);
    }

    // Step 4: Historical Comparison (if enabled and data exists)
    let comparison = null;
    if (settings.reportSettings.enableHistoricalComparison) {
      try {
        console.log("\nüìä Step 4: Historical Comparison...");
        const historicalComparison = new HistoricalComparison();
        comparison = await historicalComparison.compare(topics, stories, avgQualityScore);
        historicalComparison.close();
      } catch (error) {
        console.warn("Historical comparison skipped (insufficient data):", (error as Error).message);
      }
    }

    // Step 5: Trend Prediction (if enabled and comparison data exists)
    let prediction = null;
    if (settings.reportSettings.enableTrendPrediction && comparison) {
      try {
        console.log("\nüîÆ Step 5: Trend Prediction...");
        const trendPrediction = new TrendPrediction();
        prediction = await trendPrediction.predict(topics, comparison);
        trendPrediction.close();
      } catch (error) {
        console.warn("Trend prediction skipped:", (error as Error).message);
      }
    }

    // Step 6: Relationship Analysis (if enabled)
    let relationships = null;
    if (settings.reportSettings.enableRelationshipAnalysis && topics.length >= 2) {
      try {
        console.log("\nüîó Step 6: Relationship Analysis...");
        const relationshipAnalysis = new RelationshipAnalysis();
        relationships = await relationshipAnalysis.analyze(topics);
      } catch (error) {
        console.warn("Relationship analysis skipped:", (error as Error).message);
      }
    }

    // Step 7: Build Enhanced Report
    console.log("\n‚úçÔ∏è  Step 7: Building Report...");
    const report = buildEnhancedReport(
      currentDate,
      topics,
      analyses,
      charts,
      stories,
      settings,
      comparison,
      prediction,
      relationships,
      avgQualityScore
    );

    console.log("‚úÖ Enhanced report generated successfully\n");
    return { draftPost: report, topics, avgQualityScore };
  } catch (error) {
    console.error("Error generating enhanced draft:", error);
    const fallback = generateFallbackReport();
    return { draftPost: fallback, topics: [], avgQualityScore: 0 };
  }
}

/**
 * Build the enhanced markdown report
 */
function buildEnhancedReport(
  currentDate: string,
  topics: any[],
  analyses: Map<string, any>,
  charts: any,
  allStories: any[],
  settings: ReportSettings,
  comparison: any,
  prediction: any,
  relationships: any,
  avgQualityScore: number
): string {
  let report = `# ü§ñ AI Ë∂ãÂäø‰∏ìÈ¢òÊä•Âëä | ${currentDate}\n\n`;

  // === Section 1: Overview ===
  report += `## üìà ‰ªäÊó•Ê¶ÇËßà\n\n`;
  report += `> üìä **ÁõëÊéßË¥¶Âè∑:** 37 ‰∏™ | **Êî∂ÈõÜÂÜÖÂÆπ:** ${allStories.length} Êù° | **Ë¥®ÈáèÈÄöËøá:** ${allStories.length} Êù°\n`;
  report += `> üéØ **ËØÜÂà´‰∏ªÈ¢ò:** ${topics.length} ‰∏™ | **Ê∑±Â∫¶ÂàÜÊûê:** ${analyses.size} ‰∏™‰∏ìÈ¢ò\n\n`;

  report += `üìå **Ë¥®ÈáèËØÑÂàÜ:** Âπ≥Âùá ${Math.round(avgQualityScore)} ÂàÜ | **Êï∞ÊçÆÊù•Ê∫ê:** Ë¥¶Âè∑ËøΩË∏™ + ÂÖ≥ÈîÆËØçÊêúÁ¥¢\n\n`;

  // Core Trends Summary
  const topTopicNames = topics.slice(0, 3).map((t) => t.name).join("„ÄÅ");
  report += `üí° **Ê†∏ÂøÉË∂ãÂäø:** ${topTopicNames}Á≠â${topics.length}‰∏™‰∏ªÈ¢òÔºåÊ∂µÁõñ‰∫ßÂìÅÂèëÂ∏É„ÄÅÊäÄÊúØËøõÂ±ï„ÄÅË°å‰∏öÂä®ÊÄÅÁ≠âÂ§ö‰∏™Áª¥Â∫¶\n\n`;

  report += `---\n\n`;

  // === Section 2: Data Visualizations ===
  if (settings.reportSettings.enableVisualization) {
    report += `## üìä Êï∞ÊçÆÂèØËßÜÂåñ\n\n`;

    // Topic Distribution
    if (charts.topicDistribution) {
      report += `### ‰∏ªÈ¢òÂàÜÂ∏É\n\n`;
      report += `${charts.topicDistribution}\n\n`;
    }

    // Keyword Cloud
    if (charts.keywordCloud) {
      report += `### ÁÉ≠Èó®ÂÖ≥ÈîÆËØç\n\n`;
      report += `${charts.keywordCloud}\n\n`;
    }

    report += `---\n\n`;
  }

  // === Section 3: Historical Comparison ===
  if (comparison) {
    report += `## üìä ÂéÜÂè≤Ë∂ãÂäøÂØπÊØî\n\n`;

    // Trending topics summary
    report += `### üìà ËØùÈ¢òË∂ãÂäø\n\n`;
    report += `${comparison.summary}\n\n`;

    if (comparison.trendingTopics.new.length > 0) {
      report += `**üÜï Êñ∞Â¢ûËØùÈ¢ò:** ${comparison.trendingTopics.new.join("„ÄÅ")}\n\n`;
    }
    if (comparison.trendingTopics.continuing.length > 0) {
      report += `**üî• ÊåÅÁª≠ÁÉ≠ËÆÆ:** ${comparison.trendingTopics.continuing.slice(0, 5).join("„ÄÅ")}\n\n`;
    }
    if (comparison.trendingTopics.declining.length > 0) {
      report += `**üìâ ÁÉ≠Â∫¶‰∏ãÈôç:** ${comparison.trendingTopics.declining.join("„ÄÅ")}\n\n`;
    }

    // Quality trends
    report += `### üìä Ë¥®ÈáèË∂ãÂäø\n\n`;
    const trendEmoji = comparison.qualityTrends.trend === "rising" ? "üìà" :
                      comparison.qualityTrends.trend === "declining" ? "üìâ" : "‚û°Ô∏è";
    report += `**ÂΩìÂâçË¥®Èáè:** ${comparison.qualityTrends.current} ÂàÜ ${trendEmoji}\n`;
    report += `**7Â§©Âπ≥Âùá:** ${comparison.qualityTrends.average7Days} ÂàÜ\n`;
    report += `**30Â§©Âπ≥Âùá:** ${comparison.qualityTrends.average30Days} ÂàÜ\n\n`;

    // Account activity
    if (comparison.accountActivity.rising.length > 0) {
      report += `### üöÄ Ê¥ªË∑ÉÂ∫¶‰∏äÂçáË¥¶Âè∑\n\n`;
      comparison.accountActivity.rising.forEach((a: any) => {
        report += `- **@${a.account}** (‚Üë${Math.round(a.change)}%)\n`;
      });
      report += `\n`;
    }

    report += `---\n\n`;
  }

  // === Section 4: Trend Prediction ===
  if (prediction) {
    report += `## üîÆ Êú™Êù•Ë∂ãÂäøÈ¢ÑÊµã\n\n`;
    report += `${prediction.summary}\n\n`;

    // Emerging topics
    if (prediction.emergingTopics.length > 0) {
      report += `### üí´ ÊΩúÂú®Êñ∞ÂÖ¥ËØùÈ¢ò\n\n`;
      prediction.emergingTopics.forEach((topic: any) => {
        report += `**${topic.name}** (ÁΩÆ‰ø°Â∫¶: ${Math.round(topic.confidence * 100)}%)\n`;
        report += `${topic.reasoning}\n\n`;
      });
    }

    // Topic forecasts
    if (prediction.topicForecasts.length > 0) {
      report += `### üìà ËØùÈ¢òÂèëÂ±ïÈ¢ÑÊµã\n\n`;
      prediction.topicForecasts.forEach((forecast: any) => {
        const trendIcon = forecast.currentTrend === "rising" ? "üìà" :
                         forecast.currentTrend === "declining" ? "üìâ" : "‚û°Ô∏è";
        report += `**${forecast.name}** ${trendIcon}\n`;
        report += `${forecast.nextWeekPrediction}\n\n`;
      });
    }

    // Market insights
    if (prediction.marketInsights) {
      report += `### üí° Â∏ÇÂú∫Ê¥ûÂØü\n\n`;

      if (prediction.marketInsights.opportunities.length > 0) {
        report += `**üéØ Êú∫‰ºö:**\n`;
        prediction.marketInsights.opportunities.forEach((opp: string) => {
          report += `- ${opp}\n`;
        });
        report += `\n`;
      }

      if (prediction.marketInsights.risks.length > 0) {
        report += `**‚ö†Ô∏è È£éÈô©:**\n`;
        prediction.marketInsights.risks.forEach((risk: string) => {
          report += `- ${risk}\n`;
        });
        report += `\n`;
      }

      if (prediction.marketInsights.recommendations.length > 0) {
        report += `**üìö Âª∫ËÆÆ:**\n`;
        prediction.marketInsights.recommendations.forEach((rec: string) => {
          report += `- ${rec}\n`;
        });
        report += `\n`;
      }
    }

    report += `---\n\n`;
  }

  // === Section 5: Relationship Analysis ===
  if (relationships && relationships.topicRelationships.length > 0) {
    report += `## üîó ËØùÈ¢òÂÖ≥ËÅîÂàÜÊûê\n\n`;

    // Relationship graph
    if (relationships.relationshipGraph) {
      report += `### ÂÖ≥Á≥ªÂõæË∞±\n\n`;
      report += `${relationships.relationshipGraph}\n\n`;
    }

    // Topic relationships
    report += `### ËØùÈ¢òÂÖ≥ËÅî\n\n`;
    relationships.topicRelationships.forEach((rel: any) => {
      const strengthEmoji = rel.strength === "strong" ? "üî¥" : "üü°";
      report += `${strengthEmoji} **${rel.topic1}** ‚ü∑ **${rel.topic2}**\n`;
      report += `${rel.relationship}\n\n`;
    });

    // Technology connections
    if (relationships.technologyConnections.length > 0) {
      report += `### üîß ÊäÄÊúØËøûÊé•ÁÇπ\n\n`;
      relationships.technologyConnections.forEach((tech: any) => {
        report += `**${tech.technology}**\n`;
        report += `Áõ∏ÂÖ≥ËØùÈ¢ò: ${tech.relatedTopics.join("„ÄÅ")}\n`;
        report += `${tech.description}\n\n`;
      });
    }

    // Cross-topic insights
    if (relationships.crossTopicInsights.length > 0) {
      report += `### üíé Ë∑®ËØùÈ¢òÊ¥ûÂØü\n\n`;
      relationships.crossTopicInsights.forEach((insight: string) => {
        report += `- ${insight}\n`;
      });
      report += `\n`;
    }

    report += `---\n\n`;
  }

  // === Section 6: Topic Reports ===
  report += `## üìë ‰∏ìÈ¢òÊä•Âëä\n\n`;

  topics.forEach((topic, topicIndex) => {
    const analysis = analyses.get(topic.id);

    // Topic Header
    const emoji = getTopicEmoji(topicIndex);
    report += `### ${emoji} ‰∏ìÈ¢ò${topicIndex + 1}Ôºö${topic.name}\n\n`;

    // Topic Summary
    report += `**üìù ‰∏ìÈ¢òÊ¶ÇËø∞**\n\n`;
    report += `${topic.summary}\n\n`;
    report += `**üè∑Ô∏è ÂÖ≥ÈîÆËØç:** ${topic.keywords.join("„ÄÅ")}\n\n`;

    // Core Events
    report += `#### üîç Ê†∏ÂøÉ‰∫ã‰ª∂\n\n`;

    topic.stories.forEach((story: any, storyIndex: number) => {
      report += `**${storyIndex + 1}. ${story.headline.substring(0, 50)}${story.headline.length > 50 ? "..." : ""}**\n\n`;

      // Image
      if (story.imageUrl) {
        report += `![](${story.imageUrl})\n\n`;
      }

      // Brief description
      const description =
        story.description || `Êù•Ëá™ @${story.author || "Unknown"} ÁöÑÈáçË¶ÅÂä®ÊÄÅ`;
      report += `${description}\n\n`;

      // Metadata
      report += `üë§ ${story.author || "Unknown"} | üìÖ ${new Date(story.date_posted).toLocaleString("zh-CN", { timeZone: "Asia/Shanghai", month: "numeric", day: "numeric", hour: "2-digit", minute: "2-digit" })}`;
      if (story.source) {
        report += ` | üìç Êù•Ê∫êÔºö${story.source === "account" ? "Ë¥¶Âè∑ËøΩË∏™" : "ÂÖ≥ÈîÆËØçÊêúÁ¥¢"}`;
      }
      report += `\n\n`;

      report += `üîó [Êü•ÁúãÂéüÊñá](${story.link})\n\n`;
      report += `---\n\n`;
    });

    // Deep Analysis (if enabled)
    if (analysis && settings.reportSettings.enableDeepAnalysis) {
      report += `#### üî¨ Ê∑±Â∫¶ÂàÜÊûê\n\n`;

      // Technical Analysis
      if (analysis.technicalAnalysis) {
        report += `**ÊäÄÊúØËß£ËØª**\n\n`;
        report += `${analysis.technicalAnalysis}\n\n`;
      }

      // Impact Assessment
      if (analysis.impactAssessment) {
        report += `**ÂΩ±ÂìçËØÑ‰º∞**\n\n`;
        report += `üìç **Áü≠ÊúüÂΩ±Âìç (1-3‰∏™Êúà)**\n\n`;
        report += `${analysis.impactAssessment.shortTerm}\n\n`;
        report += `üìç **ÈïøÊúüÂΩ±Âìç (6-12‰∏™Êúà)**\n\n`;
        report += `${analysis.impactAssessment.longTerm}\n\n`;
      }

      // Key Insights
      if (analysis.keyInsights && analysis.keyInsights.length > 0) {
        report += `**üí° Ê†∏ÂøÉÊ¥ûÂØü**\n\n`;
        analysis.keyInsights.forEach((insight: string) => {
          report += `- ${insight}\n`;
        });
        report += `\n`;
      }

      // Recommendations
      if (
        settings.reportSettings.enableRecommendations &&
        analysis.recommendations
      ) {
        report += `**üìö Áõ∏ÂÖ≥Êé®Ëçê**\n\n`;

        if (analysis.recommendations.papers && analysis.recommendations.papers.length > 0) {
          report += `üìÑ **Áõ∏ÂÖ≥ËÆ∫Êñá:**\n`;
          analysis.recommendations.papers.forEach((paper: any) => {
            report += `- ${paper.title}: ${paper.description}\n`;
          });
          report += `\n`;
        }

        if (analysis.recommendations.tools && analysis.recommendations.tools.length > 0) {
          report += `üîß **Êé®ËçêÂ∑•ÂÖ∑:**\n`;
          analysis.recommendations.tools.forEach((tool: any) => {
            report += `- ${tool.name}: ${tool.description}\n`;
          });
          report += `\n`;
        }

        if (
          analysis.recommendations.accounts &&
          analysis.recommendations.accounts.length > 0
        ) {
          report += `üë§ **ÂÄºÂæóÂÖ≥Ê≥®:**\n`;
          analysis.recommendations.accounts.forEach((account: any) => {
            report += `- ${account.handle}: ${account.reason}\n`;
          });
          report += `\n`;
        }
      }

      report += `---\n\n`;
    }

    report += `\n`;
  });

  // === Footer ===
  report += `## üìÖ Êä•Âëä‰ø°ÊÅØ\n\n`;
  report += `- **ÁîüÊàêÊó∂Èó¥:** ${new Date().toLocaleString("zh-CN", { timeZone: "Asia/Shanghai" })}\n`;
  report += `- **Êï∞ÊçÆÊù•Ê∫ê:** X (Twitter) Ë¥¶Âè∑ËøΩË∏™ + ÂÖ≥ÈîÆËØçÊêúÁ¥¢\n`;
  report += `- **ÂàÜÊûêÊ®°Âûã:** DeepSeek AI\n`;
  report += `- **Êä•ÂëäÁâàÊú¨:** 2.0 Â¢ûÂº∫Áâà\n\n`;
  report += `---\n\n`;
  report += `ü§ñ Áî± [TrendFinder](https://github.com/neardws/trendFinder) Ëá™Âä®ÁîüÊàê\n`;

  return report;
}

/**
 * Get emoji for topic
 */
function getTopicEmoji(index: number): string {
  const emojis = ["üöÄ", "üß™", "üíº", "üì±", "üåê", "üéØ", "‚ö°", "üîÆ"];
  return emojis[index % emojis.length];
}

/**
 * Load report settings
 */
function loadReportSettings(): ReportSettings {
  try {
    const settingsPath = path.join(process.cwd(), "config", "report-settings.json");
    return JSON.parse(fs.readFileSync(settingsPath, "utf-8"));
  } catch (error) {
    console.warn("Could not load report settings, using defaults");
    return {
      reportSettings: {
        detailLevel: "enhanced",
        enableTopicClustering: true,
        enableDeepAnalysis: true,
        enableVisualization: true,
        enableRecommendations: true,
        enableHistoricalComparison: true,
        enableTrendPrediction: true,
        enableRelationshipAnalysis: true,
      },
    };
  }
}

/**
 * Generate fallback report if no stories
 */
function generateFallbackReport(): string {
  const currentDate = new Date().toLocaleDateString("zh-CN");
  return `# ü§ñ AI Ë∂ãÂäø‰∏ìÈ¢òÊä•Âëä | ${currentDate}\n\n‰ªäÊó•ÊöÇÊó† AI Ë∂ãÂäøÂÜÖÂÆπ„ÄÇ\n`;
}
